AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-urlwatch

  Scheduled running of URLWatch within an ECS task


Parameters:

  # Secret keys
  PushoverToken:
    Type: String
    Description: Token used to notify built packages via Pushover
    Default: '{{resolve:ssm:pushoverToken:1}}'
  PushoverUser:
    Type: String
    Description: User used to notify built packages via Pushover
    Default: '{{resolve:ssm:pushoverUser:1}}'

  # Email Details
  EmailHost:
    Type: String
    Description: IMAP server details to email results to
    Default: '{{resolve:secretsmanager:cloud-urlwatch/email-details:SecretString:EmailHost}}'
  EmailPort:
    Type: String
    Description: Port of the IMAP
    Default: '{{resolve:secretsmanager:cloud-urlwatch/email-details:SecretString:EmailPort}}'
  EmailUser:
    Type: String
    Description: Username of the IMAP server
    Default: '{{resolve:secretsmanager:cloud-urlwatch/email-details:SecretString:EmailUser}}'
  EmailPass:
    Type: String
    Description: Password of the IMAP server
    Default: '{{resolve:secretsmanager:cloud-urlwatch/email-details:SecretString:EmailPass}}'
  EmailFrom:
    Type: String
    Description: Address to send the email from
    Default: '{{resolve:secretsmanager:cloud-urlwatch/email-details:SecretString:EmailFrom}}'
  EmailRcpt:
    Type: String
    Description: Address to send the email to
    Default: '{{resolve:secretsmanager:cloud-urlwatch/email-details:SecretString:EmailRcpt}}'


Globals:
  Function:
    Timeout: 3
    Runtime: python3.9

Resources:

  ###
  # Schedule
  ##

  UrlwatchScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Scheduled execution of the ECS task"
      Name: !Sub "${AWS::StackName}-update-rule"
      ScheduleExpression: cron(0 0 * * ? *)
      State: ENABLED
      Targets:
        -
          Id: !Sub "${AWS::StackName}-scheduler"
          Arn: !GetAtt UrlwatchCluster.Arn
          RoleArn: !GetAtt ExecuteTaskRole.Arn
          Input: !Sub '{ "containerOverrides": [ { "name": "${AWS::StackName}-container", "environment": [ { "name": "ECS_CLUSTER", "value": "${UrlwatchCluster}" }, { "name": "TASK_DEFN": "value": "${UrlwatchTaskDefinition}" }, { "name": "SUBNETS": "value": "${UrlwatchSubnet}" }, { "name": "SECURITY_GROUPS", "value": "${UrlwatchTaskSecurityGroup}" } ] } ] }'
          EcsParameters:
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                Subnets:
                  - !Ref UrlwatchSubnet
                SecurityGroups:
                  - !Ref UrlwatchTaskSecurityGroup
                AssignPublicIp: ENABLED
            TaskDefinitionArn: !Ref UrlwatchTaskDefinition

  ###
  # Networking
  ##

  # The ECS task needs to be on the same VPC as the EFS instance, and also
  # needs internet connectivity to download the image from docker hub. This 
  # VPC creates a single public subnet which routes through an internet 
  # gateway to allow for this.

  UrlwatchVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True

  UrlwatchInternetGateway:
    Type: AWS::EC2::InternetGateway

  UrlwatchInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref UrlwatchInternetGateway
      VpcId: !Ref UrlwatchVPC

  UrlwatchSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.1.0/24
      VpcId: !Ref UrlwatchVPC
      AvailabilityZone: "eu-west-1a"
      MapPublicIpOnLaunch: True

  UrlwatchNatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: UrlwatchInternetGatewayAttachment
    Properties:
      Domain: vpc

  UrlwatchNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt UrlwatchNatGatewayEIP.AllocationId
      SubnetId: !Ref UrlwatchSubnet

  UrlwatchRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref UrlwatchVPC

  UrlwatchRoute:
    Type: AWS::EC2::Route
    DependsOn: UrlwatchInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref UrlwatchRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref UrlwatchInternetGateway

  UrlwatchRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref UrlwatchRouteTable
      SubnetId: !Ref UrlwatchSubnet

  ###
  # EFS
  ##

  UrlwatchFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "elasticfilesystem:ClientMount"
              - "elasticfilesystem:ClientWrite"
            Principal:
              AWS: "*"

  UrlwatchMountPoint:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref UrlwatchFileSystem
      SubnetId: !Ref UrlwatchSubnet
      SecurityGroups:
      - !Ref UrlwatchEfsSecurityGroup

  UrlwatchAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref UrlwatchFileSystem
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0777"
        Path: "/home/urlwatch/config"

  UrlwatchEfsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for the EFS"
      VpcId: !Ref UrlwatchVPC
      SecurityGroupIngress:
        -
          Description: "Inbound port for EFS"
          FromPort: 2049
          IpProtocol: "tcp"
          ToPort: 2049
          SourceSecurityGroupId: !Ref UrlwatchTaskSecurityGroup

  ###
  # ECS
  ##

  UrlwatchCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  UrlwatchTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - UrlwatchFileSystem
    Properties:
      Family: !Sub "${AWS::StackName}-task"
      Cpu: "256"
      Memory: "512"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: !GetAtt UrlwatchTaskRole.Arn
      ExecutionRoleArn: !GetAtt UrlwatchTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-container"
          Image: "couldinho/docker-urlwatch"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub "/ecs/${AWS::StackName}-docker"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          Environment:
            - Name: "UW_HOST"
              Value: !Ref EmailHost
            - Name: "UW_PORT"
              Value: !Ref EmailPort
            - Name: "UW_USER"
              Value: !Ref EmailUser
            - Name: "UW_PASS"
              Value: !Ref EmailPass
            - Name: "UW_FROM"
              Value: !Ref EmailFrom
            - Name: "UW_RCPT"
              Value: !Ref EmailRcpt
          MountPoints:
            - SourceVolume: data
              ContainerPath: /home/urlwatch/config
              ReadOnly: false
      Volumes:
      - Name: data
        EFSVolumeConfiguration:
          FilesystemId: !Ref UrlwatchFileSystem
          TransitEncryption: ENABLED
          AuthorizationConfig:
            AccessPointId: !Ref UrlwatchAccessPoint
            IAM: ENABLED

  UrlwatchTaskLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}-docker"
      RetentionInDays: 90

  UrlwatchTaskSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for the ECS Task"
      VpcId: !Ref UrlwatchVPC
      SecurityGroupEgress:
        -
          Description: "EFS mount port"
          FromPort: 2049
          IpProtocol: "tcp"
          ToPort: 2049
          CidrIp: 0.0.0.0/0
        -
          Description: "IMAP outbound port"
          FromPort: 587
          IpProtocol: "tcp"
          ToPort: 587
          CidrIp: 0.0.0.0/0
        -
          Description: "HTTP port for non-SSL traffic"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          Description: "HTTP port for SSL traffic"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
          CidrIp: 0.0.0.0/0


  ###
  # Roles
  ##

  ExecuteTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-execute-task-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-execute-task-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - iam:GetRole
                  - iam:PassRole
                Resource:
                  - !Ref UrlwatchTaskDefinition
                  - !GetAtt UrlwatchTaskRole.Arn
              - Effect: Allow
                Action:
                  - ecs:ListTasks
                Resource:
                  '*'
                Condition:
                  ArnEquals:
                    ecs:cluster: !GetAtt UrlwatchCluster.Arn

  UrlwatchTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-task-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-task-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                Resource:
                  - !GetAtt UrlwatchAccessPoint.Arn
